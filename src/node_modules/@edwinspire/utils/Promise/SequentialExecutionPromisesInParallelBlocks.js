import { ArrayChunk } from "@edwinspire/utils/ArrayChunk";
//sequential execution of promises in parallel blocks
export class SequentialExecutionPromisesInParallelBlocks {

    constructor() {

    }

    GroupByNumberItems(items, items_per_block, promise_function) {
        let blocks = ArrayChunk(items, items_per_block);
        blocks.forEach(block => {
            //let return_block =
             block.reduce((accumulatorPromise, item, idx) => {
                return accumulatorPromise.then(() => {
                    return promise_function(item);
                });
            }, Promise.resolve());

            /*
            return_block.then((r) => {
                console.log(r);
            })
            */

        });

    }

    ByNumberBlocks(items, number_blocks, promise_function) {
        let elements_per_block = Math.ceil(items.length / number_blocks);
        this.GroupByNumberItems(items, elements_per_block, promise_function);
    }

}


