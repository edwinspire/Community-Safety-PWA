const dotenv = require("dotenv");
dotenv.config();
const EventEmitter = require('events');
const { Client } = require('pg')
const connectionString = process.env.DATABASE_URL;
//TODO Buscar la forma de reconectar si la conexiÃ³n se pierde
export class pgListen extends EventEmitter {
    constructor(listen_notification_list) {
        super();
        if (listen_notification_list && listen_notification_list.length > 0) {
            let events = listen_notification_list.map((event) => {
                return 'LISTEN "' + event + '";';
            });

            let query = events.join(' ');

            console.log(query);
            const client = new Client({
                connectionString: connectionString,
                ssl: false
            });

            client.connect();
            client
                .query(query)
                .then(result => {
                    console.log('TEST LISTEN')
                })
                .catch(e => console.trace(e.stack))


            client.on('error', err => {
                console.trace(err.stack)
            })

            client.on('notification', not => {
                this.emit('notification', not);
            })

        }else{
            throw 'list_events must be a non-empty array';
        }
        /*
                setInterval(function () {
                    console.log('Reconexion');
                    client.connect();
                    client
                        .query('LISTEN test')
                        .then(result => {
                            console.log('TEST')
                        })
                        .catch(e => console.trace(e.stack))
        
        
                }, 10000);
                */

    }

}