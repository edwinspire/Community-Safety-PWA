require('dotenv').config({ override: true });
const Router = require('express-promise-router')
const db = require('@app_express_routes/pgexpress')
const soap = require('soap');
var pushSubscription;

async function fnAccessPoint(req, res) {

    const myURL = new URL('https://' + req.hostname + req.originalUrl);
    let ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;

    let idata = {
        cookies: req.cookies,
        body: req.body,
        query: req.query,
        method: req.method,
        pathname: myURL.pathname,
        ipclient: ip,
        headers: req.headers
    }


    if (req.headers.authorization && req.headers.authorization.indexOf('Basic ') >= 0) {
        const base64Credentials = req.headers.authorization.split(' ')[1];
        const credentials = Buffer.from(base64Credentials, 'base64').toString('ascii');
        const [username, password] = credentials.split(':');
        idata.headers.BasicAuthentication = { username: username, password: password };
    }

    try {
        let query = {
            name: idata.method,
            text: `SELECT api.fn_access_point($1::JSON)`,
            values: [JSON.stringify(idata)]
        }
        let respg = await db.query(query);

        if (respg.rows.length > 0) {
            let r = respg.rows[0].fn_access_point;

            if (r.data && r.data.token) {
                res.cookie('TOKEN_USER', r.data.token, {
                    maxAge: 86400 * 1000
                    //expire: 360000 + Date.now()
                    //httpOnly: true
                });
            }

            if (r.status == '401') {
                res.status(401).location('/').end();
            } else {
                res.status(r.status).json(r.data);
            }

        } else {
            res.status(204).json([]);
        }
    } catch (e) {
        console.error(e);
        res.status(500).json(e);
    }
}

// create a new express-promise-router
// this has the same API as the normal express router except
// it allows you to use async functions as route handlers
const router = new Router()
// export our router to be mounted by the parent application
module.exports = router

router.all('/pgapi/*', async (req, res) => {
    fnAccessPoint(req, res);
})



// Para subscribir usuarios web-push
router.post('/webpush-subscription', async (req, res) => {
    pushSubscription = req.body;
    fnAccessPoint(req, res);
});


// Para subscribir usuarios web-push
router.get('/push', async (req, res) => {
    console.log('pushSubscription2 =>> ' + pushSubscription);
    res.status(200).json({ 'pushSubscription': pushSubscription });
})




router.all('/Test/EstadoDocumentosElectronicos', (req, res) => {
    var url = 'https://www.crcind.com/csp/samples/SOAP.Demo.cls?wsdl';
    var args = { Arg1: 12, Arg2: 1000 };
    soap.createClient(url, (err, client) => {
        client.AddInteger(args, (err, result) => {
            console.log(result);
            req.body = result;
            console.log(result);
            fnAccessPoint(req, res);
        });
    });
});

