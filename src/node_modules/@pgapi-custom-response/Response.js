// A esta clase se le puede agregar las respuestas creadas por el usuario cuando una ruta sea validada por pgAPI
const { CNX_SERVER_159_JSON, SAP_USER, SAP_PWD, CNX_SERVER_159, TANDI_CONSULTA_ESTADO_DOCUMENTOS, RUC_FARMA, SERVICIO_INTEGRADOR_FARMA_PRD } = process.env;
import { Response } from "@edwinspire/express-pgapi/Response";
import { SequentialExecutionPromisesInParallelBlocks } from "@edwinspire/utils/Promise/SequentialExecutionPromisesInParallelBlocks";
const { TYPES } = require("tedious");
const mssql = require("@edwinspire/mssql/MSSql");
const fetch = require("node-fetch");
const sql = require('mssql');
var soap = require("soap");
const ServerRoot = require("@edwinspire/express-server/GetServerRoot");

export class CustomResponse extends Response {
    constructor() {
        //console.log(CNX_SERVER_159_JSON);
        //console.log(JSON.parse(CNX_SERVER_159_JSON));
        super();
    }

    // Envía las autorizaciones de documentos electrónicos a SAP a SAP
    async EnviarAutorizacionesSAP(pgdata, req, res) {

        let autorizacion_sri = req.body.autorizacion_sri;
        let mensaje_sri = req.body.mensaje_sri;
        let fecha_autorizacion = req.body.fecha_autorizacion
        let estado = req.body.estado;

        if (autorizacion_sri, mensaje_sri, fecha_autorizacion, estado) {

            try {

                let retorno_sap = await WSEnviarAutorizacionesSAP(autorizacion_sri, mensaje_sri, fecha_autorizacion, estado);

                res.status(200).json(retorno_sap);

            } catch (err) {
                res.status(500).json(err);
            }
        } else {
            res.status(500).json({ error: 'autorizacion_sri, mensaje_sri, fecha_autorizacion, estado son requeridas' });
        }

    }

    async EnviarAutorizacionesCAR(pgdata, req, res) {

        let autorizacion_sri = req.body.autorizacion_sri;
        let mensaje_sri = req.body.mensaje_sri;
        let fecha_autorizacion = req.body.fecha_autorizacion
        let estado = req.body.estado;

        if (autorizacion_sri, mensaje_sri, fecha_autorizacion, estado) {

            try {

                let retorno_sap = await WSEnviarAutorizacionesCAR(autorizacion_sri, mensaje_sri, fecha_autorizacion, estado);

                res.status(200).json(retorno_sap);

            } catch (err) {
                res.status(500).json(err);
            }
        } else {
            res.status(500).json({ error: 'autorizacion_sri, mensaje_sri, fecha_autorizacion, estado son requeridas' });
        }

    }

    async Exec_pa_CambiarEstadoFactReserv(pgdata, req, res) {

        let procedimiento = req.query.procedimiento;
        let lsp_id = req.query.lsp_id;

        if (procedimiento && lsp_id) {

            let query = `
            USE [EasygestionEmpresarial];
            UPDATE [sap].[tbl_LogSeguimientoSAP] set lsp_revision=lsp_revision+' OK' where lsp_proceso='VentasMatriz' and lsp_estado='ERROR' and
            lsp_id in (${lsp_id});
            ${procedimiento}
            `;

            try {
                await sql.connect(CNX_SERVER_159)
                const result = await sql.query(query);
                //                console.log(result.recordsets);

                if (result.recordsets.length > 0) {
                    res.status(200).json(result.recordsets[0]);
                } else {
                    res.status(200).json([]);
                }

            } catch (err) {
                res.status(500).json(err);
            }
        } else {
            res.status(500).json({ error: 'No ha definido procedimiento o lsp_id' });
        }

    }

    async DriverMsSql(pgdata, req, res) {

        try {
            let param = pgdata.query_parameters.map((element, i) => {
                let MSSQLFielType = TYPES.Text;
                switch (element.type) {
                    case 'BigInt':
                        MSSQLFielType = TYPES.BigInt;
                        break;
                    case 'Time':
                        MSSQLFielType = TYPES.Time;
                        break;
                    case 'TinyInt':
                        MSSQLFielType = TYPES.TinyInt;
                        break;
                    case 'UDT':
                        MSSQLFielType = TYPES.UDT;
                        break;
                    case 'UniqueIdentifier':
                        MSSQLFielType = TYPES.UniqueIdentifier;
                        break;
                    case 'VarBinary':
                        MSSQLFielType = TYPES.VarBinary;
                        break;
                    case 'VarChar':
                        MSSQLFielType = TYPES.VarChar;
                        break;
                    case 'Xml':
                        MSSQLFielType = TYPES.Xml;
                    case 'Date':
                        MSSQLFielType = TYPES.Date;
                        break;
                    case 'DateTime':
                        MSSQLFielType = TYPES.DateTime;
                        break;
                    case 'Decimal':
                        MSSQLFielType = TYPES.Decimal;
                        break;
                    case 'Float':
                        MSSQLFielType = TYPES.Float;
                        break;
                    case 'Money':
                        MSSQLFielType = TYPES.Money;
                        break;
                    case 'Numeric':
                        MSSQLFielType = TYPES.Numeric;
                        break;
                    case 'SmallDateTime':
                        MSSQLFielType = TYPES.SmallDateTime;
                        break;
                    case 'SmallInt':
                        MSSQLFielType = TYPES.SmallInt;
                        break;
                    case 'Int':
                        MSSQLFielType = TYPES.Int;
                        break;
                    case 'NVarChar':
                        MSSQLFielType = TYPES.NVarChar;
                        break;
                    case 'Char':
                        MSSQLFielType = TYPES.Char;
                        break;
                    case 'NChar':
                        MSSQLFielType = TYPES.NChar;
                        break;
                }

                return { name: element.name, type: MSSQLFielType, value: element.value };
            });
            // make sure that any items are correctly URL encoded in the connection string
            let query = pgdata.query;
            //console.log(pgdata);
            let sql = new mssql.MSSql(pgdata.connection_string);
            const result = await sql.execSql(query, param);
            res.status(200).json(result.rows);

        } catch (err) {
            console.log(err);
            res.status(500).json(err);
        }

    }

    async ConsultarCabInconsistencias(pgdata, req, res) {

        try {

            let array_inconsistencias = req.body.inconsistencias;

            let nombre_params = array_inconsistencias.map((element, i) => {
                return '@paramId' + i;
            });

            let parametros = array_inconsistencias.map((element, i) => {
                return { name: 'paramId' + i, type: TYPES.BigInt, value: element.trim() };
            });
            // make sure that any items are correctly URL encoded in the connection string
            let query = `
SELECT o.Nombre, o.ofi_codigo_auxiliar, ip.ip_red, cab.* FROM [LNK_SRV10].[farmaInconsistencias].[dbo].[tbl_inco_bodega] cab WITH(NOLOCK) 
INNER JOIN [EasygestionEmpresarial].[dbo].[Oficina] o WITH(NOLOCK) ON cab.id_farmacia = o.Oficina COLLATE Modern_Spanish_CI_AS
INNER JOIN [LNK_SRV10].[bdgeneral].[dbo].[OFICINA_IP_SERVER] ip WITH(NOLOCK) ON o.Oficina COLLATE Modern_Spanish_CI_AS = ip.oficina
WHERE id_inco_bodega in (${nombre_params.join(',')});
        `;

            let sql = new mssql.MSSql(JSON.parse(CNX_SERVER_159_JSON));
            const result = await sql.execSql(query, parametros);
            res.status(200).json(result.rows);

        } catch (err) {
            res.status(500).json(err);
        }

    }

    async ConsultarLogInconsistencia(pgdata, req, res) {

        try {

            let num_inconsistencia = req.query.num_inconsistencia;

            // make sure that any items are correctly URL encoded in the connection string
            let query = `
            SELECT TOP 1000 * FROM [EasyGestionEmpresarial].[sap].[tbl_LogSeguimientoSAP] WITH(NOLOCK) WHERE lsp_identificador = '${num_inconsistencia}' AND lsp_estado = 'OK'
            AND lsp_respuesta like 'Enviado: se envió la inconsistencia correctamente a sap:%'
        `;

            // console.log(query);
            let sql = new mssql.MSSql(JSON.parse(CNX_SERVER_159_JSON));
            const result = await sql.execSql(query);
            res.status(200).json(result.rows);

        } catch (err) {
            console.log(err);
            res.status(500).json(err);
        }

    }

    async ConsultarDetInconsistencias(pgdata, req, res) {

        try {

            let inconsistencia = req.query.inconsistencia;

            // make sure that any items are correctly URL encoded in the connection string
            let query = `
            WITH detalle AS (
                select *, CASE WHEN id_motivo = 1 THEN 'INCF'+CAST(id_inco_bodega AS varchar) WHEN id_motivo = 2 THEN 'INCS'+CAST(id_inco_bodega AS varchar)   ELSE 'NODEFINIDO' END AS num_inconsistencia from [LNK_SRV10].[farmaInconsistencias].[dbo].[tbl_detalle_inco_bodega] with(nolock) 
                where id_inco_bodega  = '${inconsistencia}'
                )
                SELECT * FROM detalle
        `;
            let sql = new mssql.MSSql(JSON.parse(CNX_SERVER_159_JSON));
            const result = await sql.execSql(query);
            res.status(200).json(result.rows);

        } catch (err) {
            res.status(500).json(err);
        }

    }


    async Consultartbl_MovimientoInventarioSapIncon(pgdata, req, res) {

        try {
            let inconsistencia = req.query.inconsistencia || '0000';
            let material = req.query.material || '0000';
            // make sure that any items are correctly URL encoded in the connection string
            let query = `select * from ITE_IntegradorSap.inv.tbl_MovimientoInventarioSap with (nolock) WHERE mis_texto_cabecera_doc='${inconsistencia}' AND mis_material = '${material}'`;
            let sql = new mssql.MSSql(JSON.parse(CNX_SERVER_159_JSON));
            const result = await sql.execSql(query);
            res.status(200).json(result.rows);

        } catch (err) {
            res.status(500).json(err);
        }

    }

    async Consultar_v_tbl_movinvent_Inco(pgdata, req, res) {

        try {
            let articulo = req.query.id_producto || '0000';
            let id_inconsistencia = req.query.id_inconsistencia || '0000';

            let cnx = { server: req.query.ip, options: { requestTimeout: 90000 }, authentication: { options: { password: "sqlfarma", userName: "sa" } } };
            //console.log(cnx);
            // make sure that any items are correctly URL encoded in the connection string
            let query = `
            use EasyGestionEmpresarial;
            select top(1000) cantidad,cantidad_total as total, fecha_mov,tipo_mov, Serie_Factura, *
            from v_tbl_movinvent(nolock) mv
            where codigo_producto='${articulo}'
            AND tx_referencia LIKE 'INCONSISTENCIA%${id_inconsistencia}%'
            `;
            let sql = new mssql.MSSql(cnx);
            const result = await sql.execSql(query);
            res.status(200).json(result.rows);

        } catch (err) {
            res.status(500).json(err);
        }

    } 

    async ServicioIntegradorPRD_servicioconsumo_ObtenerDepositosFarmacias(pgdata, req, res) {

        //        console.dir(req.query, 'Cuenta: ', req.query.Cuenta.length);

        if (!req.query.Cuenta || req.query.Cuenta.length < 2) {
            res.status(200).json([]);
        } else {
            var args = { attributes: {}, dato: { I115Datos: { Sociedad: '1000', Cuenta: req.query.Cuenta, Asignacion: req.query.Asignacion, FechaDocumento: req.query.Fecha } } };
            //console.log(args);
            soap.createClient(SERVICIO_INTEGRADOR_FARMA_PRD, (err, client) => {

                if (err) {
                    res.status(500).json(err);
                } else {

                    client.ObtenerDepositosFarmacias(args, (err2, result) => {
                        if (err2) {
                            res.status(500).json(err2);
                        } else {
                            try {
                                res.status(200).json(result.ObtenerDepositosFarmaciasResult.DatosDepositos.DatosDepositos);
                            } catch (error_catch) {
                                console.error(error_catch);
                                res.status(200).json([]);
                            }
                        }

                    });
                }

            });
        }

    }

    async ServicioIntegradorPRD_servicioconsumo_StockInventarioOnLine(pgdata, req, res) {

        console.log(req.body);

        if (!req.body.tiendas || req.body.tiendas.length < 1) {
            res.status(200).json([]);
        } else {

            let tiendas = req.body.tiendas.map((t) => {
                return { 'string': t }
            });

            let articulos = req.body.articulos.map((a) => {
                return { 'string': a }
            });

            var args = {
                attributes: {}, datos: [
                    {
                        Tiendas: tiendas,
                        Articulos: articulos,
                        Almacen: 'X'
                    }

                ]
            };
            console.dir(args);
            soap.createClient(SERVICIO_INTEGRADOR_FARMA_PRD, (err, client) => {

                if (err) {
                    res.status(500).json(err);
                } else {

                    client.StockInventarioOnLine(args, (err2, result) => {
                        console.log(client.lastRequest);
                        if (err2) {
                            res.status(500).json(err2);
                        } else {
                            try {
                                console.log(result);
                                res.status(200).json(result.StockInventarioOnLineResult);
                            } catch (error_catch) {
                                res.status(500).json(error_catch);
                            }
                        }

                    });
                }

            });
        }

    }

    async ReenviarDocumentosPVSinAutorizarCAR(pgdata, req, res) {

        let series = req.body.series.map((doc) => {
            return "'" + doc + "'";
        });


        try {
            // make sure that any items are correctly URL encoded in the connection string

            let query = `
            DELETE FROM [LNK_SRV38].[FacturacionElectronica].[fac].[tbl_RespuestaEnvioAutCAR]
            WHERE serie_documento IN
            (
                ${series.join(',')}
            );
            INSERT INTO [LNK_SRV38].[FacturacionElectronica].[dbo].[GEN_TMP_AutorizacionDocumentos]
            SELECT TOP(100000) * FROM [LNK_SRV38].[FacturacionElectronica].[dbo].[GEN_LOG_AutorizacionDocumentos] WITH(NOLOCK) WHERE gla_serie_factura IN
            (
                ${series.join(',')}
            );
            SELECT GETDATE();
        `;

   //         console.log(query);

            let sql = new mssql.MSSql(JSON.parse(CNX_SERVER_159_JSON));
            const result = await sql.execSql(query);
            res.status(200).json(result.rows);

        } catch (err) {
            res.status(500).json(err);
        }

    }

   

   

    async CambiarEstadoInconsistencia(pgdata, req, res) {

        try {
            let data = req.body;
            let query_update = `
            BEGIN TRANSACTION;
            UPDATE [LNK_SRV10].[farmaInconsistencias].[dbo].[tbl_inco_bodega] SET fecha_cierre='${data.fecha_cab}',	estado='C' where id_inco_bodega='${data.id_inco_bodega}';
            `;
            query_update =
                query_update +
                "\n" +
                ArmaUpdateInconsistenciaPorMotivo(data.id_inco_bodega, data.motivo1) +
                "\n" +
                ArmaUpdateInconsistenciaPorMotivo(data.id_inco_bodega, data.motivo2);
            //query_update = query_update + '\n' + 'OUTPUT INSERTED.*';
            query_update += '\nSELECT GETDATE()\nCOMMIT;'
            console.log(query_update);
            // make sure that any items are correctly URL encoded in the connection string
            await sql.connect(CNX_SERVER_159)
            //const result = await sql.query(query_update);
            const result = await sql.query('SELECT GETDATE();');
            console.dir(result)
            //res.status(200).json(result.recordsets[0]);
            res.status(200).json({ query: query_update });
        } catch (err) {
            console.log(err);
            res.status(500).json(err);
        }

    }

    async ConsultarEstadoDocumentosSRIDocSAP(pgdata, req, res) {

        let Seq = new SequentialExecutionPromisesInParallelBlocks();

        try {
            if (Array.isArray(pgdata.documentos)) {

                let docs = pgdata.documentos.map((document) => {

                    let tipo_documento_sri = '';
                    switch (document.tip_documento) {
                        case 'Nota de Crédito':
                            tipo_documento_sri = '04';
                            break;
                        case 'Factura':
                            tipo_documento_sri = '01';
                            break;
                        case 'Comprobante de Retención':
                            tipo_documento_sri = '07';
                            break;
                        default:
                            tipo_documento_sri = document.tip_documento;
                            break;
                    }

                    return {
                        clave_acceso: document.clave_acceso,
                        ruc: RUC_FARMA,
                        tipo_documento_sri: tipo_documento_sri,
                        establecimiento: document.factura_legal_ecuador.substring(0, 3),
                        punto_emision: document.factura_legal_ecuador.substring(3, 6),
                        secuencial: document.factura_legal_ecuador.substring(6, 20),
                        Sucursal: '004',
                        num_doc_sap: document.num_doc_sap
                    };
                });

                Seq.ByNumberBlocks(docs, 10, async (documento) => {
                    //console.log(documento);
                    let result_aut = await searchAuthorizationTandicorp(documento);

                    // Envía estado del documento a SAP
                    let retorno_sap = {};
                    let EstadoDocSRI = result_aut.ActualizarDocumento
                    if (EstadoDocSRI.estado === 'A' && EstadoDocSRI.autorizacion_sri == documento.clave_acceso) {
                        retorno_sap = await WSEnviarAutorizacionesSAP(EstadoDocSRI.autorizacion_sri, EstadoDocSRI.mensaje_sri, EstadoDocSRI.fecha_autorizacion, EstadoDocSRI.estado);
                    } else if (EstadoDocSRI.serieFactura && EstadoDocSRI.serieFactura.length > 0) {
                        retorno_sap = await WSEnviarAutorizacionesSAP(EstadoDocSRI.serieFactura, EstadoDocSRI.mensaje_sri, EstadoDocSRI.fecha_autorizacion, EstadoDocSRI.estado);
                    } else if (EstadoDocSRI.estado === 'R' && EstadoDocSRI.serieFactura === '' && documento.clave_acceso && !EstadoDocSRI.mensaje_sri.includes('Documento no se encuentra registrado')) {
                        retorno_sap = await WSEnviarAutorizacionesSAP(documento.clave_acceso, EstadoDocSRI.mensaje_sri, EstadoDocSRI.fecha_autorizacion, EstadoDocSRI.estado);
                    }

                    let data_result = { ...result_aut, num_doc_sap: documento.num_doc_sap, sap: retorno_sap };

                    let response = await fetch(ServerRoot() + '/pgapi/farma/fact_elect_sap/actualiza_estado_doc_sap', {
                        method: "POST",
                        body: JSON.stringify(data_result),
                        headers: { "Content-Type": "application/json" },
                    });
                    return await response.json();
                });

                res.status(200).json({ ok: 'Consutando estado en segundo plano.' });
            } else {
                res.status(200).json({});
            }

        } catch (err) {
            res.status(500).json(err);
        }

    }

    // Obtiene estado de documentos, notifica autorizaciones
    async ConsultarEstadoDocumentosSRIPV(pgdata, req, res) {

        let Seq = new SequentialExecutionPromisesInParallelBlocks();
        //console.log(pgdata);
        try {
            if (Array.isArray(pgdata.documentos)) {

                let docs = pgdata.documentos.map((document) => {

                    let tipo_documento_sri = '';
                    switch (document.tip_documento) {
                        case 'Nota de Crédito':
                            tipo_documento_sri = '04';
                            break;
                        case 'Factura':
                            tipo_documento_sri = '01';
                            break;
                        case 'Comprobante de Retención':
                            tipo_documento_sri = '07';
                            break;
                        default:
                            tipo_documento_sri = document.tip_documento;
                            break;
                    }

                    return {
                        ruc: RUC_FARMA,
                        tipo_documento_sri: tipo_documento_sri,
                        establecimiento: document.factura_legal_ecuador.substring(0, 3),
                        punto_emision: document.factura_legal_ecuador.substring(3, 6),
                        secuencial: document.factura_legal_ecuador.substring(6, 20),
                        Sucursal: '004',
                        num_doc_sap: document.num_doc_sap
                    };
                });

                Seq.ByNumberBlocks(docs, 20, ConsultarEstadoSRIDocSAP);

                res.status(200).json({ ok: 'ok' });
            } else {
                res.status(200).json({});
            }

        } catch (err) {
            res.status(500).json(err);
        }

    }


}



// Consulta el estado del documento en Tandicorp
function searchAuthorizationTandicorp(documento) {
    return new Promise((resolve, reject) => {
        soap.createClient(TANDI_CONSULTA_ESTADO_DOCUMENTOS, (err, client) => {
            //console.log("Consulta doc ", documento);
            if (err) {
                reject(err);
            } else {
                //    console.log(client.describe());
                var args = {
                    ruc: documento.ruc,
                    tipoDocumento: documento.tipo_documento_sri,
                    establecimiento: documento.establecimiento,
                    puntoEmision: documento.punto_emision,
                    secuencial: documento.secuencial,
                    codigoSucursal: documento.Sucursal,
                };

                try {
                    client.searchAuthorization(args, (err, result_aut) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result_aut);
                        }
                    });
                } catch (error) {
                    reject(error);
                }
            }
        });
    });
}

// 
function WSEnviarAutorizacionesSAP(autorizacion_sri, mensaje_sri, fecha_autorizacion, estado) {
    //var wsdl = __dirname + "\\wsdl_1.wsdl";
    var wsdl = ServerRoot() + "/farma/wsdl/SI_Autorizadocumentos_Sync_Out.wsdl";
    //   console.log(wsdl);
    return new Promise((resolve, reject) => {
        soap.createClient(wsdl, (err, client) => {
            //console.log(err, SAP_USER, SAP_PWD);
            if (err) {
                reject(err);
            } else {
                client.setSecurity(
                    new soap.BasicAuthSecurity(SAP_USER, SAP_PWD)
                );
                //                console.log(client.describe());
                var args = { attributes: {}, autorizacion_sri: autorizacion_sri, mensaje_sri: mensaje_sri, fecha_autorizacion: fecha_autorizacion, estado: estado };

                client.SI_Autorizadocumentos_Sync_OutService.SI_Autorizadocumentos_Sync_OutPort.SI_Autorizadocumentos_Sync_Out(
                    args,
                    (err, result) => {
                        //console.log(client.lastRequest);
                        if (err) {
                            console.log(err);
                            reject(err);
                        } else {
                            //                         console.log(result);
                            resolve(result);
                        }
                    }
                );
            }
        });
    });
}

// Envía Autorizaciones de documentos de PV a CAR
function WSEnviarAutorizacionesCAR(lista_documentos) {
    var wsdl = ServerRoot() + "/farma/wsdl/SI_Actfactelectronica_Sync_OutService.wsdl";
    return new Promise((resolve, reject) => {
        soap.createClient(wsdl, (err, client) => {
            if (err) {
                reject(err);
            } else {
                client.setSecurity(
                    new soap.BasicAuthSecurity(SAP_USER, SAP_PWD)
                );

                var args = { attributes: {}, Transaccion: lista_documentos };
                client.SI_Actfactelectronica_Sync_OutService.HTTP_Port.SI_Actfactelectronica_Sync_Out(
                    args,
                    (err, result) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result.Transaccion);
                        }
                    }
                );
            }
        });
    });
}


function ArmaUpdateInconsistenciaPorMotivo(id_inco_bodega, matriz_motivo) {
    if (matriz_motivo && matriz_motivo.length > 0) {
        let num_doc_sap_mov =
            matriz_motivo[0].log_inconsistencia[0].lsp_respuesta.match(
                /[0-9]+/gu
            )[0];

        let lista_articulos_motivo = matriz_motivo.map((elem) => {
            return "'" + elem.id_producto + "'";
        });

        let articulos_motivo = lista_articulos_motivo.join(",");

        return `
  UPDATE [LNK_SRV10].[farmaInconsistencias].[dbo].[tbl_detalle_inco_bodega] SET solucion='A',nota='',num_ing_egr='N.I. #SN - N.E. #${num_doc_sap_mov}' WHERE id_inco_bodega='${id_inco_bodega}' and id_producto in (
${articulos_motivo}
);
    `;
    } else {
        return "";
    }
}