const fetch = require("node-fetch");
const aut = require("./fn_oms_authentication");
const nodemailer = require("nodemailer");


async function fn_update_status(idsendemail, status, message) {

  //let url = process.env.OMS_SERVER + ':' + process.env.PORT + '/pgapi/v2/fn_sendemail/change_status';

  let url = process.env.OMS_SERVER + ':' + process.env.PORT + '/pgapi/v2/fn_sendemail/change_status';
  if(!process.env.LOCAL_SERVER){
  url = process.env.OMS_SERVER + '/pgapi/v2/fn_sendemail/change_status'
  }
  

  let result = await fetch(url, {
    method: "POST",
    body: JSON.stringify({ idsendemail: idsendemail, status: status, return: message }),
    headers: {
      "Content-Type": "application/json",
      "Authorization": aut()
    },
  });

  console.log(result.status);

}

function sendEmail(idsendemail, transport, from, to, subject, text, html) {
  console.log('Email', idsendemail, new Date());
  return new Promise(async (resolve, reject) => {
    try {
      let transporter = nodemailer.createTransport(transport);

      // send mail with defined transport object
      let info = await transporter.sendMail({
        from: from, // sender address
        to: to, // list of receivers
        subject: subject, // Subject line
        text: text, // plain text body
        html: html, // html body
      });
      //console.log("Message sent: %s", info.messageId);
      fn_update_status(idsendemail, 1, info.messageId);

      resolve(info);
    } catch (error) {
      fn_update_status(idsendemail, 2, JSON.stringify(error));
      //console.log("Message sent: %s", error);
      resolve(error);
    }

  });
}

module.exports = function Fn() {

  return new Promise(async (resolve, reject) => {

    let resultSend = [];
    //console.log('Expire events');
let url = process.env.OMS_SERVER + ':' + process.env.PORT + '/pgapi/v2/fn_sendemail';
if(!process.env.LOCAL_SERVER){
url = process.env.OMS_SERVER + '/pgapi/v2/fn_sendemail'
}

    try {
      let result = await fetch(url, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "Authorization": aut()
        },
      });

      if (result.status == "200") {
        let emails = await result.json();


        if (Array.isArray(emails)) {
          emails.forEach((email_data) => {

            let email_list = Object.values(email_data.to).filter((elem) => {
              return elem && elem.toString().includes('@');
            });

            resultSend.push(sendEmail(email_data.idsendemail, email_data.config.transport, email_data.config.from, email_list.join(','), email_data.subject, email_data.text, email_data.html));
            //await sendEmail(email_data.idsendemail, email_data.config.transport,  email_data.config.from, email_list.join(','), email_data.subject, email_data.text, email_data.html);

          });
        }

        Promise.all(resultSend).then(values => {
          resolve(values);
        });



      } else {
        console.error(result);
        reject(await result.json());
      }
    } catch (err) {
      reject(err);
    }

  });


}